<div class="container">
    {{> temperatura}}
    {{> humedad}}
    {{> ph}}
</div>

<script>
      /********** Handle VALUES throw WebSocket and Socket.io *********/
      function timedRefresh(timeoutPeriod) {
        setTimeout("location.reload(true);",timeoutPeriod);
      }

      $(function () {
        //var socket = io.connect('http://localhost:5000', {transports:['websocket']});
        //var socket = io.connect('http://iot-assignment1.herokuapp.com', {transports:['websocket']});
        var socket = io.connect('https://trabajodegrado.herokuapp.com/', {transports:['websocket']});
        
        
        /// Devices Management
        /*************************************** ANALYSIS PLOT ***************************************/
        var ctx = document.getElementById('temp-chart').getContext('2d');
        var charttemp = new Chart(ctx, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                labels: [],
                datasets: [{fill:false, label: 'Temperatura', backgroundColor: '#58ACFA', borderColor: '#58ACFA',
                    data: []
                }],
                sum: 0,
            },
            // Configuration options go here
            options: {
              responsive: true,
              title: {
                display: true,
                text: 'Temperatura (°C)'
              },
              scales: {
                yAxes: [{
                  ticks: { suggestedMin: -50, suggestedMax: 50 }
                }]
              }
            }
        });
        var ctxa = document.getElementById('temp-chart-avg').getContext('2d');
        var charttempavg = new Chart(ctxa, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                labels: [],
                datasets: [{fill:false, label: 'Promedio', backgroundColor: '#ff0066', borderColor: '#ff0066',
                    data: []
                }]
            },
            options: {
              responsive: true,
              scales: {
                yAxes: [{
                  ticks: { suggestedMin: -50, suggestedMax: 50 }
                }]
              }
            }
        });
        var ctx1 = document.getElementById('hum-chart').getContext('2d');
        var charthum = new Chart(ctx1, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{fill:false, label: 'Humedad', backgroundColor: '#FACC2E', borderColor: '#FACC2E',
                    data: []
                }],
                sum: 0,
            },
            options: { 
              responsive: true,
              title: {
                display: true,
                text: 'Humedad (%)'
              },
              scales: {
                yAxes: [{
                  ticks: { suggestedMin: 0, suggestedMax: 100 }
                }]
              }
            }
        });
        var ctx1a = document.getElementById('hum-chart-avg').getContext('2d');
        var charthumavg = new Chart(ctx1a, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                labels: [],
                datasets: [{fill:false, label: 'Promedio', backgroundColor: '#ff0066', borderColor: '#ff0066',
                    data: []
                }]
            },
            options: {
              responsive: true,
              scales: {
                yAxes: [{
                  ticks: { suggestedMin: 0, suggestedMax: 100 }
                }]
              }  
            }
        });
        var ctx4 = document.getElementById('rain-chart').getContext('2d');
        var chartrain = new Chart(ctx4, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{fill:false, label: 'PH', backgroundColor: '#81F7F3', borderColor: '#81F7F3',
                    data: []
                }],
                sum: 0,
            },
            options: { 
              responsive: true,
              title: {
                display: true,
                text: 'PH'
              },
              scales: {
                yAxes: [{
                  ticks: { suggestedMin: 0, suggestedMax: 50 }
                }]
              }
            }
        });
        var ctx4a = document.getElementById('rain-chart-avg').getContext('2d');
        var chartrainavg = new Chart(ctx4a, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                labels: [],
                datasets: [{fill:false, label: 'Promedio', backgroundColor: '#ff0066', borderColor: '#ff0066',
                    data: []
                }]
            },
            options: {
              responsive: true,
              scales: {
                yAxes: [{
                  ticks: { suggestedMin: 0, suggestedMax: 50 }
                }]
              }
            }
        });
        /*************************************** WEBSOCKET EVENTS ***************************************/

        /*************** Push lasthour values in the plot ***************/
        socket.on("lastvalues", function(values){
          if(charttemp.data.labels.length == 0 && values.length > 0){
            values.reverse()
            values.forEach( value =>{
              charttemp.data.datasets[0].data.push(value.temperature)
              charttemp.data.sum = parseInt(charttemp.data.sum) + parseInt(value.temperature)
              charttemp.data.labels.push('');
              charttemp.update();
              charttempavg.data.datasets[0].data.push(parseInt(charttemp.data.sum)/charttemp.data.datasets[0].data.length)
              charttempavg.data.labels.push('');
              charttempavg.update();
              charthum.data.datasets[0].data.push(value.humidity)
              charthum.data.sum = parseInt(charthum.data.sum) + parseInt(value.humidity)
              charthum.data.labels.push('');
              charthum.update();
              charthumavg.data.datasets[0].data.push(parseInt(charthum.data.sum)/charthum.data.datasets[0].data.length)
              charthumavg.data.labels.push('');
              charthumavg.update();
              chartrain.data.datasets[0].data.push(value.rain_height)
              chartrain.data.sum = parseInt(chartrain.data.sum) + parseInt(value.rain_height)
              chartrain.data.labels.push('');
              chartrain.update();
              chartrainavg.data.datasets[0].data.push(parseInt(chartrain.data.sum)/chartrain.data.datasets[0].data.length)
              chartrainavg.data.labels.push('');
              chartrainavg.update();
            });
            $('#avg-temp').html('<h4 align="center">' + (parseInt(charttemp.data.sum)/charttemp.data.datasets[0].data.length).toFixed(2) + ' °C</h4>');
            $('#avg-hum').html('<h4 align="center">' + (parseInt(charthum.data.sum)/charthum.data.datasets[0].data.length).toFixed(2) + ' %</h4>');
            $('#avg-rain').html('<h4 align="center">' + (parseInt(chartrain.data.sum)/chartrain.data.datasets[0].data.length).toFixed(2) + ' mm/h</h4>');
          }
        });

        /************************ LATEST VALUES MANAGEMENT ***************************/
        socket.on('temperature', function(data){
          var payload = data.split(";");
          $('#latest-temp').html('<h4 align="center">' + payload[1] + ' °C</h4>');
          $('#lasthour-temp').prepend('<c><font size="2">' + "<"+ payload[1] + " °C> " +'</font></c>');
          charttemp.data.datasets[0].data.push(payload[1]);
          charttemp.data.labels.push('');
          charttemp.data.sum = parseInt(charttemp.data.sum) + parseInt(payload[1]);
          var avg = (parseInt(charttemp.data.sum)/charttemp.data.datasets[0].data.length).toFixed(2);
          charttempavg.data.datasets[0].data.push(avg);
          charttempavg.data.labels.push('');
          charttempavg.update();
          charttemp.update();
          $('#avg-temp').html('<h4 align="center">' + avg + ' °C</h4>');
        });
        socket.on('humidity', function(data){
          var payload = data.split(";");
          $('#latest-hum').html('<h4 align="center">' + payload[1] + ' %</h4>');
          $('#lasthour-hum').prepend('<c><font size="2">' + "<"+ payload[1] + " %> " +'</font></c>');
          charthum.data.datasets[0].data.push(payload[1]);
          charthum.data.labels.push('');
          charthum.data.sum = parseInt(charthum.data.sum) + parseInt(payload[1]);
          var avg = (parseInt(charthum.data.sum)/charthum.data.datasets[0].data.length).toFixed(2);
          charthumavg.data.datasets[0].data.push(avg);
          charthumavg.data.labels.push('');
          charthumavg.update();
          charthum.update();
          $('#avg-hum').html('<h4 align="center">' + avg + ' %</h4>');
        });
        socket.on('rain', function(data){
          var payload = data.split(";");
          $('#latest-rain').html('<h4 align="center">' + payload[1] + ' mm/h</h4>');
          $('#lasthour-rain').prepend('<c><font size="2">' + "<"+ payload[1] + " mm/h> " +'</font></c>');
          chartrain.data.datasets[0].data.push(payload[1]);
          chartrain.data.labels.push('');
          chartrain.data.sum = parseInt(chartrain.data.sum) + parseInt(payload[1]);
          var avg = (parseInt(chartrain.data.sum)/chartrain.data.datasets[0].data.length).toFixed(2);
          chartrainavg.data.datasets[0].data.push(avg);
          chartrainavg.data.labels.push('');
          chartrain.update();
          chartrainavg.update();
          $('#avg-rain').html('<h4 align="center">' + avg + ' mm/h</h4>');
        });
        /**************************************************************************************************************/
      });
    </script>